generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              Int                      @id @default(autoincrement())
  clerkId         String                   @unique
  name            String
  username        String                   @unique
  email           String                   @unique
  password        String?
  title           String?
  points          Int                      @default(0)
  role            Role                     @default(USER)
  bio             String?
  website         String?
  facebook        String?
  twitter         String?
  instagram       String?
  picture         String
  location        String?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  ChatroomUsers   ChatroomUsers[]
  comments        Comment[]
  interviews      Interview[]
  likes           Like[]
  meetup          MeetUp[]
  Message         Message[]
  onboarding      Onboarding?
  podcasts        Podcast[]
  posts           Post[]
  Share           Share[]
  shows           Shows[]
  subscribedShows UsersSubscribedToShows[]
  groupAdmin      Group[]                  @relation("GroupAdmins")
  groups          Group[]                  @relation("UserGroups")
  following       Follower[]               @relation("follower")
  followBy        Follower[]               @relation("followed")
}

model Follower {
  id              Int                      @id @default(autoincrement())
  followerId      Int                      // ID of the user who follows
  followedId      Int                      // ID of the user being followed

  follower        User                     @relation(fields: [followerId], references: [id], name: "follower")
  followed        User                     @relation(fields: [followedId], references: [id], name: "followed")

  @@unique([followerId, followedId]) // Ensures that the same follow relationship can't be created more than once
}

model Onboarding {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique
  businessStage String
  codeAbility   String
  interests     String[]
  isOnboarded   Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id        Int         @id @default(autoincrement())
  content   String
  contentType String?
  authorId  Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  isEdited  Boolean     @default(false)
  viewCount Int         @default(0)
  image     String
  groupId   Int?
  heading   String
  clerkId   String?
  comments  Comment[]
  likes     Like[]
  author    User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  group     Group?      @relation(fields: [groupId], references: [id])
  Share     Share[]
  tags      TagOnPost[]
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int?
  commentId Int?
  liked     Boolean  @default(true)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String    @db.VarChar(150)
  authorId  Int
  postId    Int
  parentId  Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isEdited  Boolean   @default(false)
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentToComment")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes     Like[]
}

model Tag {
  id    Int         @id @default(autoincrement())
  name  String      @unique
  posts TagOnPost[]
}

model TagOnPost {
  id     Int  @id @default(autoincrement())
  postId Int
  tagId  Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@unique([postId, tagId])
}

model Shows {
  id          Int                      @id @default(autoincrement())
  name        String                   @unique
  userId      Int
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  podcasts    Podcast[]
  user        User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscribers UsersSubscribedToShows[]
}

model Podcast {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  details       String
  episodeNumber Int      @default(autoincrement())
  image         String
  showId        Int
  title         String
  updatedAt     DateTime @updatedAt
  url           String
  userId        Int
  show          Shows    @relation(fields: [showId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UsersSubscribedToShows {
  id     Int   @id @default(autoincrement())
  userId Int
  showId Int
  show   Shows @relation(fields: [showId], references: [id])
  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, showId])
}

model Group {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  coverImage  String?
  createdBy   Int
  description String?  @db.VarChar(300)
  logo        String?
  name        String   @unique
  updatedAt   DateTime @updatedAt
  posts       Post[]
  admins      User[]   @relation("GroupAdmins")
  members     User[]   @relation("UserGroups")
}

model MeetUp {
  id                  Int      @id @default(autoincrement())
  createdAt           DateTime @default(now())
  contactEmail        String
  contactNumber       String
  image               String
  location            String
  responsiblePersonId Int
  summary             String
  title               String
  updatedAt           DateTime @updatedAt
  responsiblePerson   User     @relation(fields: [responsiblePersonId], references: [id], onDelete: Cascade)
  tags                TagOnMeetup[]
}

model MeetupTag {
  id         Int              @id @default(autoincrement())
  name       String           @unique
  meetups TagOnMeetup[]
}

model TagOnMeetup {
  id          Int          @id @default(autoincrement())
  meetupId    Int
  tagId       Int
  meetup      MeetUp    @relation(fields: [meetupId], references: [id], onDelete: Cascade)
  tag         MeetupTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([meetupId, tagId])
}

model InterviewTag {
  id         Int              @id @default(autoincrement())
  name       String           @unique
  interviews TagOnInterview[]
}

model TagOnInterview {
  id          Int          @id @default(autoincrement())
  interviewId Int
  tagId       Int
  interview   Interview    @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  tag         InterviewTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([interviewId, tagId])
}

model Interview {
  id           Int              @id @default(autoincrement())
  createdAt    DateTime         @default(now())
  creatorId    Int
  title        String
  bannerImage  String
  details      String
  websiteLink  String
  salary       Int
  salaryPeriod String
  updates      Int
  updatedAt    DateTime         @updatedAt
  creator      User             @relation(fields: [creatorId], references: [id])
  tags         TagOnInterview[]
}

model Chatroom {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ChatroomUsers ChatroomUsers[]
  Message       Message[]
}

model ChatroomUsers {
  userId     Int
  chatroomId Int
  Chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, chatroomId])
}

model Message {
  id         Int      @id @default(autoincrement())
  text       String?
  createdAt  DateTime @default(now())
  userId     Int
  chatroomId Int
  attachment      String?
  attachmentType  String?
  messageUUID     String
  Chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Share {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  Post      Post     @relation(fields: [postId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  USER
}
