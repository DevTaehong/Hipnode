generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}


enum Role {
  ADMIN
  USER
}


model User {
  id                  Int       @id @default(autoincrement())
  clerkId             String    @unique
  name                String
  username            String    @unique
  email               String    @unique
  password            String?
  role                Role      @default(USER)
  bio                 String?
  picture             String
  location            String?
  posts               Post[]
  likes               Like[]
  comments            Comment[]
  shows               Shows[]    
  podcasts            Podcast[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  onboarding          Onboarding?
}


model Onboarding {
  id                  Int         @id @default(autoincrement())
  userId              Int         @unique
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessStage       String 
  codeAbility         String 
  interests           String[]
  isOnboarded         Boolean       
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}



model Post {
  id                  Int      @id @default(autoincrement())
  content             String
  authorId            Int
  author              User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes               Like[]
  tags                TagOnPost[]
  comments            Comment[]
  image               String
  isEdited            Boolean  @default(false)
  viewCount           Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Like {
  id                  Int      @id @default(autoincrement())
  userId              Int
  user                User     @relation(fields: [userId], references: [id])
  postId              Int?
  post                Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId           Int?
  comment             Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  liked               Boolean  @default(true)
}

model Comment {
  id                  Int      @id @default(autoincrement())
  content             String   @db.VarChar(150)
  authorId            Int
  author              User     @relation(fields: [authorId], references: [id])
  postId              Int?
  post                Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentId            Int?
  parent              Comment? @relation("CommentToComment", fields: [parentId], references: [id])
  replies             Comment[] @relation("CommentToComment")
  likes               Like[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  isEdited            Boolean  @default(false)
}

model Tag {
  id                  Int        @id @default(autoincrement())
  name                String     @unique
  posts               TagOnPost[]
}

model TagOnPost {
  id                  Int  @id @default(autoincrement())
  postId              Int
  post                Post @relation(fields: [postId], references: [id])
  tagId               Int
  tag                 Tag  @relation(fields: [tagId], references: [id])
  @@unique([postId, tagId])
}




model Shows {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  userId    Int       
  user      User      @relation(fields: [userId], references: [id])
  podcasts  Podcast[] 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
model Podcast {
  id            Int       @id @default(autoincrement())
  episodeNumber Int       @default(autoincrement())
  image         String
  title         String
  details       String
  url           String
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  show          Shows      @relation(fields: [showId], references: [id])
  showId        Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}




model MeetUp {
  id                  Int       @id @default(autoincrement())
  createdAt           DateTime  @default(now()) 
}
model Group {
  id                  Int       @id @default(autoincrement())
  createdAt           DateTime  @default(now()) 
}


